- if !(current_user.has_role? "moderator")  
  %ul.fixed-activon-btn-new.morefixed-activon-btn 
    %li.mdl-button.mdl-js-button.mdl-button--fab.mdl-js-ripple-effect.mdl-color--red-700.drop
      %i.material-icons.ml-color-text--shades-white view_module
      %ul{:for => "demo-menu-top-right"}
        - page = (params[:controller].split("/").second).singularize
        - case page
          - when 'client'
            - if current_user.has_role? :licensee_admin
              %li
                = link_to new_admin_client_path ,:class => "centerAlign" do
                  Add Client
          - when 'event'
            %li
              - if params[:show_history] != "true" and @event.nil?
                - if current_user.has_role? :licensee_admin or current_user.has_role? :client_admin
                  = link_to new_admin_client_event_path(:client_id => @client.id),:class => "centerAlign" do
                    Add Event
              - else
                / = link_to admin_client_event_path(:client_id => @client.id,:id => @event.id,:history => "true"),:target => "_blank",:class => "centerAlign" do
                /   Show History
                - if @event.mobile_application.nil? and @event.status != "pending"
                  = link_to new_admin_client_mobile_application_path(:client_id => @event.client_id),:class => "centerAlign" do
                    Add Mobile Application
                  = link_to admin_client_mobile_applications_path(:client_id => @event.client_id, :feature => 'events', :event_id => @event.id), :class => "centerAlign" do
                    Add To Existing Mobile Applications  
                - elsif @event.mobile_application.present?   
                  = link_to admin_event_mobile_application_path(:event_id => @event.id, :id => @event.mobile_application_id),:class => "centerAlign" do
                    Manage Mobile Application    
          - when 'mobile_application'
            %li
              - if current_user.has_role? :licensee_admin or current_user.has_role? :client_admin
                = link_to new_admin_client_mobile_application_path(:client_id => params[:client_id]),:class => "centerAlign" do
                  Add Mobile Application
          - when 'invitee_structure'
            %li
              = link_to new_admin_event_grouping_path(:event_id => @event.id) ,:class => "centerAlign" do
                Create Grouping
              = link_to new_admin_event_invitee_structure_path(:importable_type => 'invitee_data', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                Import Data
          - when 'theme'
            %li
              - if params[:show_history] != "true" and @theme.nil?
                = link_to new_admin_theme_path ,:class => "centerAlign" do
                  Add Theme
              - else
                / = link_to admin_event_theme_path(:event_id => @event.id,:id => @theme.id,:history => "true"),:target => "_blank" ,:class => "centerAlign" do
                /   Show History     
          - when 'speaker'
            %li
              - if @event.present? and @speakers.present?# and (!current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_speakers_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export
              - if @event.present?# and !(current_user.has_role? :db_manager)
                = link_to new_admin_event_speaker_path(:importable_type => 'speaker', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                  Import
              - if @feedbacks.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_speakers_path(:event_id => @event.id, :export_type => 'Feedback', :format => 'xls'),:class => "centerAlign" do
                  Export Feedback
              - if false #@event.present?
                = link_to new_admin_event_speaker_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Speaker
          - when 'attendee'
            %li
              - if params[:show_history] != "true" and @attendee.nil?
                = link_to new_admin_import_path(:importable_type => 'attendee', :importable_id => @event.id) ,:class => "centerAlign" do
                  Import
              - else
                / = link_to admin_event_attendee_path(:event_id => @event.id,:id => @attendee.id,:history => "true"),:target => "_blank" ,:class => "centerAlign" do
                /   Show History     
          - when 'agenda'
            %li
              - if @event.present? and @feedbacks.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_agendas_path(:event_id => @event.id, :format => 'xls', :export_type => 'Feedback'),:class => "centerAlign" do
                  Export Session Feedback
                / - if (!current_user.has_role? :db_manager)
              - if @event.present?
                = link_to new_admin_event_agenda_path(:importable_type => 'agenda', :importable_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                  Import
          - when 'invitee'
            %li
              - if params[:show_history] != "true" and @event.present? 
                - if params[:action] != "new" and @event.invitees.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                  = link_to admin_event_invitees_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                    Export
                = link_to new_admin_event_invitee_path(:importable_type => 'invitee', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                  Import
              - else
                / = link_to admin_event_invitee_path(:event_id => @event.id,:id => @invitee.id,:history => "true"),:target => "_blank" ,:class => "centerAlign" do
                /   Show History
          - when 'leaderboard'
            %li
              - if @invitees.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_leaderboards_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export      
          - when 'user'
            %li
              - if current_user.has_role? :licensee_admin
                - if params[:client_id].present?
                  = link_to new_admin_client_user_path(:client_id => params[:client_id], :role => 'client_admin'), :class => "centerAlign" do
                    Add Client Admin
                - else
                  = link_to admin_clients_path(:feature => 'users', :role => 'client_admin'), :class => "centerAlign" do
                    Add Client Admin

              - if current_user.has_role? :licensee_admin or current_user.has_role? :client_admin
                - if params[:event_id].present?
                  = link_to new_admin_event_user_path(:event_id => params[:event_id], :feature => 'users', :role => 'event_admin'), :class => "centerAlign" do
                    Add Event Admin
                - elsif params[:client_id].present?
                  = link_to admin_client_events_path(:client_id => params[:client_id], :role => 'event_admin', :feature => 'users'), :class => "centerAlign" do
                    Add Event Admin
                - else
                  = link_to admin_clients_path(:feature => 'users', :role => 'event_admin'), :class => "centerAlign" do
                    Add Event Admin
              
              - if current_user.has_role? :licensee_admin or current_user.has_role? :client_admin or current_user.has_role? :event_admin
                - if params[:event_id].present?
                  = link_to new_admin_event_user_path(:event_id => params[:event_id], :role => 'moderator'), :class => "centerAlign" do
                    Add Module Admin
                - elsif params[:client_id].present?
                  = link_to admin_client_events_path(:client_id => params[:client_id], :feature => 'users', :role => 'moderator'), :class => "centerAlign" do
                    Add Module Admin
                - else
                  = link_to admin_clients_path(:feature => 'users', :role => 'moderator'), :class => "centerAlign" do
                    Add Module Admin

              - if current_user.has_role? :licensee_admin or current_user.has_role? :client_admin or current_user.has_role? :event_admin
                - if params[:event_id].present?
                  = link_to new_admin_event_user_path(:event_id => params[:event_id], :feature => 'users', :role => 'moderator'), :class => "centerAlign" do
                    Add Moderator
                - elsif params[:client_id].present? and (current_user.has_role? :licensee_admin or current_user.has_role? :client_admin or current_user.has_role? :event_admin)
                  = link_to admin_client_events_path(:client_id => params[:client_id], :feature => 'users', :role => 'moderator'), :class => "centerAlign" do
                    Add Moderator
                - elsif (current_user.has_role? :licensee_admin or current_user.has_role? :client_admin or current_user.has_role? :event_admin)
                  = link_to admin_clients_path(:feature => 'users', :role => 'moderator'), :class => "centerAlign" do
                    Add Moderator

          - when 'licensee'
            %li
              = link_to new_admin_licensee_path ,:class => "centerAlign" do
                Add Licensee
          - when 'conversation'
            %li
              - if @conversations.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_conversations_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export
              - @conversation_wall = ConversationWall.find_by_event_id(@event.id)   
              - if @conversation_wall.present?
                = link_to edit_admin_event_conversation_wall_path(:event_id => @event.id,:id =>@conversation_wall.id),:class => "centerAlign" do
                  Customize Wall
              - else
                = link_to new_admin_event_conversation_wall_path(:event_id => @event.id),:class => "centerAlign" do
                  Customize Wall
              - if false
                = link_to new_admin_event_conversation_path(:importable_type => 'conversation', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                  Import   
                - if @conversations.present?
                  = link_to new_admin_event_conversation_path(:importable_type => 'comments', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                    Import Comments
                  = link_to new_admin_event_conversation_path(:importable_type => 'likes', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                    Import Likes
                - if false#@comments.present?
                  = link_to admin_event_comments_path(:event_id => @event.id, :format => "xls") ,:class => "centerAlign" do
                    Export 
                / - if @likes.present?
                /   = link_to admin_event_likes_path(:event_id => @event.id, :format => "xls") ,:class => "centerAlign" do
                /     Export Likes
          - when 'feedback'
            %li
              / - if ["index", "new"].include?(params[:action])# and (!current_user.has_role? :db_manager)
              /   = link_to new_admin_event_feedback_path(:importable_type => 'feedback', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
              /     Import
              - if params[:action] == "index" and @feedbacks.present?# and ( current_user.has_role? :licensee_admin or current_user.has_role? :db_manager)
                / - if !(current_user.has_role? :db_manager)
                = link_to admin_event_feedbacks_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export  
                - if false
                  = link_to new_admin_event_feedback_path(:event_id => @event.id, :importable_type => 'user_feedbacks', :import => "xls") ,:class => "centerAlign" do
                    Import Answer     
                - if @user_feedbacks.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                  = link_to admin_event_user_feedbacks_path(:event_id => @event.id, :format => "xls",:export_type => 'user_feedback') ,:class => "centerAlign" do
                    Export Answer 
          - when 'faq'
            %li
              - if params[:show_history] != "true" and @faq.nil?
                = link_to new_admin_event_faq_path(:event_id => @event.id),:class => "centerAlign" do
                  Add FAQ
              - else
                / = link_to admin_event_faq_path(:event_id => @event.id,:id => @faq.id,:history => "true"),:target => "_blank" ,:class => "centerAlign" do
                /   Show History     
          - when 'image'
            %li
              - if @event.present?
                = link_to  new_admin_event_image_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Image 
          - when 'highlight_image'
            %li
              - if @event.present?
                = link_to  new_admin_event_highlight_image_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Highlight Image        
          - when 'poll'
            %li
              - if false#["index", "new"].include?(params[:action]) and (!current_user.has_role_for_event?("db_manager", @event.id)) #(!current_user.has_role? :db_manager)
                = link_to new_admin_event_poll_path(:event_id => @event.id, :importable_type => 'poll', :import => "xls") ,:class => "centerAlign" do
                  Import 
                / - if params[:action] == "index" and @polls.present?
                /   = link_to admin_event_polls_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                /     Export
                - if false
                  = link_to new_admin_event_poll_path(:event_id => @event.id, :importable_type => 'user_polls', :import => "xls") ,:class => "centerAlign" do
                    Import Answer
              - if @user_polls.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_user_polls_path(:event_id => @event.id, :format => "xls") ,:class => "centerAlign" do
                  Export Answer
              - @poll_wall = PollWall.find_by_event_id(@event.id)   
              - if @poll_wall.present?
                = link_to edit_admin_event_poll_wall_path(:event_id => @event.id,:id =>@poll_wall.id),:class => "centerAlign" do
                  Customize Wall
              - else
                = link_to new_admin_event_poll_wall_path(:event_id => @event.id),:class => "centerAlign" do
                  Customize Wall                   
          - when 'qna'
            %li
              - if @qnas.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_qnas_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export
                - @qna_wall = QnaWall.find_by_event_id(@event.id)   
                - if @qna_wall.present?
                  = link_to edit_admin_event_qna_wall_path(:event_id => @event.id,:id =>@qna_wall.id),:class => "centerAlign" do
                    Customize Wall
                - else
                  = link_to new_admin_event_qna_wall_path(:event_id => @event.id),:class => "centerAlign" do
                    Customize Wall 
              - if false
                = link_to new_admin_event_qna_path(:importable_type => 'qna', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                  Import        
          - when 'sponsor'
            %li
              - if params[:show_history] != "true" and @sponsor.nil?
                = link_to new_admin_event_sponsor_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Sponsor
              - else
                / = link_to admin_event_sponsor_path(:event_id => @event.id,:id => @sponsor.id,:history => "true"),:target => "_blank" ,:class => "centerAlign" do
                /   Show History    
          - when 'award'
            %li
              - if params[:show_history] != "true" and @award.nil?
                = link_to new_admin_event_award_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Award
              - else
                / = link_to admin_event_award_path(:event_id => @event.id,:id => @award.id,:history => "true"),:target => "_blank" ,:class => "centerAlign" do
                /   Show History     
          - when 'winner'
            %li
              - if params[:show_history] != "true" and @winner.nil?
                = link_to new_admin_event_award_winner_path(:event_id => @event.id,:award_id => @award.id),:class => "centerAlign" do
                  Add Winner
              - else
                / = link_to admin_event_award_winner_path(:event_id => @event.id,:award_id => @winner.award_id,:id => @winner.id,:history => "true"),:target => "_blank" ,:class => "centerAlign" do
                /   Show History     
          - when 'e_kit'
            %li
              - if @event.present?
                = link_to new_admin_event_e_kit_path(:event_id => @event.id),:class => "centerAlign" do
                  Add e_Kit 
          - when 'contact'
            %li
              - if @event.present?
                = link_to new_admin_event_contact_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Contact
          - when 'emergecy exit'
            %li
              - if @event.present?
                = link_to new_admin_event_emergency_exit_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Emergecy Exit                         
          - when 'notification'
            %li
              - if @event.present?
                = link_to new_admin_event_notification_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Notification
          
          - when 'panel'
            %li
              - if @event.present?
                = link_to new_admin_event_panel_path(:event_id => @event.id),:class => "centerAlign" do
                  Add Panel   
          - when 'quiz'
            %li
              / - if ["index", "new"].include?(params[:action])
              /   = link_to new_admin_event_quizee_path(:event_id => @event.id, :importable_type => 'quizee', :import => "xls") ,:class => "centerAlign" do
              /     Import 
              - if params[:action] == "index" and @quizzes.present?
                = link_to admin_event_user_quizzes_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export

                - @quiz_wall = QuizWall.find_by_event_id(@event.id)   
                - if @quiz_wall.present?
                  = link_to edit_admin_event_quiz_wall_path(:event_id => @event.id,:id =>@quiz_wall.id),:class => "centerAlign" do
                    Customize Wall
                - else
                  = link_to new_admin_event_quiz_wall_path(:event_id => @event.id),:class => "centerAlign" do
                    Customize Wall 
          - when 'my_travel'
            %li
              - if @event.present?# and !(current_user.has_role? :db_manager)
                = link_to new_admin_event_my_travel_path(:importable_type => 'my_travel', :event_id => @event.id,:import => 'xls') ,:class => "centerAlign" do
                  Import 
              - if @event.present?# and (current_user.has_role? :db_manager or current_user.has_role? :licensee_admin)
                = link_to admin_event_my_travels_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export   
          - when 'user_registration'
            %li
              - if @event.present? and @user_registrations.present?
                = link_to admin_event_user_registrations_path(:event_id => @event.id, :format => 'xls'),:class => "centerAlign" do
                  Export